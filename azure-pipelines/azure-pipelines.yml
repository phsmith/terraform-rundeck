# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - develop
  - main

pr: none

variables:
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: vars/prod.yml
- ${{ else }}:
  - template: vars/nprod.yml

pool: Services-Pool

stages:
- stage: Build
  jobs:
  - job: GetRequirementsFiles
    displayName: Get Ansible Requirements
    steps:
    - task: Bash@3
      name: Galaxy
      displayName: Ansible-Galaxy Install
      inputs:
        targetType: 'inline'
        noProfile: false
        noRc: false
        script: |
          rm -rf $(Build.SourcesDirectory)/.ansible 2> /dev/null
          find ./projects/ -maxdepth 2 -regex '.*requirements.ya?ml' | while read requirements_file
          do
            echo "##vso[task.setvariable variable=hasRequirements;isOutput=true]true"
            source $(Agent.HomeDirectory)/venv/bin/activate
            ansible-galaxy install -r $requirements_file
          done
      env:
        ANSIBLE_ROLES_PATH: $(Build.SourcesDirectory)/.ansible/roles
        ANSIBLE_COLLECTIONS_PATHS: $(Build.SourcesDirectory)/.ansible/collections
    - task: PublishBuildArtifacts@1
      condition: and(succeeded(), eq(variables['Galaxy.hasRequirements'], 'true'))
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/.ansible/
        ArtifactName: ansible-galaxy-requirements
        publishLocation: 'Container'
        StoreAsTar: true
- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: RundeckAnsibleRequirements
    displayName: Rundeck Ansible Requirements
    environment:
      name: $(environmentName)
      resourceType: virtualMachine
    variables:
      GalaxyRequirements: $[ stageDependencies.Build.GetRequirementsFiles.outputs['Galaxy.hasRequirements'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Extract Ansible Requirements
            condition: eq(variables.GalaxyRequirements, 'true')
            inputs:
              targetType: 'inline'
              noProfile: false
              noRc: false
              script: |
                ansible_requirements=$(Pipeline.Workspace)/ansible-galaxy-requirements/ansible-galaxy-requirements.tar
                sudo su rundeck -c "tar -xvf $ansible_requirements -C /var/lib/rundeck/.ansible"
  - deployment: RundeckProjectsJobs
    displayName: Rundeck Projects & Jobs
    condition: succeeded()
    environment:
      name: $(environmentName)
      resourceType: virtualMachine
      tags: primary
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Bash@3
            displayName: Terraform Apply
            inputs:
              filePath: 'scripts/terraform_apply.sh'
              noProfile: false
              noRc: false
            env:
              TF_VAR_rundeck_url: $(rundeck_url)
              TF_VAR_rundeck_token: $(rundeck_token)
              TF_VAR_rundeck_hosts: $(rundeck_hosts)
              TF_VAR_rundeck_hosts_user: $(rundeck_hosts_user)
              TF_VAR_rundeck_hosts_password: $(rundeck_hosts_password)
- stage: Report
  condition: failed()
  jobs:
  - job: AzureBoardsBugCard
    displayName: Azure Boards Bug Card
    steps:
    - checkout: none
    - task: mspremier.CreateWorkItem.CreateWorkItem-task.CreateWorkItem@1
      displayName: Azure Boards Create Bug Card
      inputs:
        teamProject: technology-infrastructure-services
        areaPath: 'technology-infrastructure-services\tis-automation'
        iterationPath: 'a12203f5-1bb2-4337-bbb2-1cb9a0cc38b5@currentIteration'
        workItemType: bug
        title: 'Terraform-Rundeck: Pipeline Error'
        fieldMappings: |
          Description = Error while executing <strong>[infra] Terraform-Rundeck-CD pipeline:</strong> <br />https://dev.azure.com/my_project/_build/results?buildId=$(Build.BuildId)&view=results
          Product = Automation
